<tool id="measureGastruloids" name="measureGastruloids" version="@TOOL_VERSION@">
    <description> Use macro from Pierre Osteil to measure gastruloids.</description>
    <macros>
        <token name="@TOOL_VERSION@">20220119</token>
    </macros>
    <requirements>
        <requirement type="package" version="20170530">fiji</requirement>
        <requirement type="package" version="1.5.0">fiji-morpholibj</requirement>
    </requirements>
    <stdio>
        <regex match="\[ERROR\]" source="stdout" level="fatal"/>
        <exit_code range="1:" level="fatal"/>
    </stdio>
    <command>
        <![CDATA[
        #import re

        mkdir input &&
        mkdir output &&
        #for file in $input_format.input
            #set identifier = re.sub('[^\s\w\-]', '_', str($file.element_identifier))
            ln -s '$file' input/${identifier}.${input_format.file_type} &&
        #end for
        ImageJ --ij2 --headless --console -macro  '$__tool_directory__/'Area_measure_for_OMERO.ijm "`pwd`/input/,output/,.${input_format.file_type}" > output.log &&
        bash '$__tool_directory__/'combine_csv.sh @TOOL_VERSION@ $summary_results
        ]]>
    </command>
    <inputs>
        <conditional name="input_format">
            <param name="file_type" type="select" label="Input format" >
                <option value="tiff" selected="true" >TIFF</option>
                <option value="png" >PNG</option>
                <option value="jpeg" >JPEG</option>
            </param>
            <when value="tiff">
                <param name="input" multiple="true"  type="data" format="tiff" label="Select Images to analyse."/>
            </when>
            <when value="png">
                <param name="input" multiple="true"  type="data" format="png" label="Select Images to analyse."/>
            </when>
            <when value="jpeg">
                <param name="input" multiple="true"  type="data" format="jpg" label="Select Images to analyse."/>
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="logfile" format="txt" from_work_dir="output.log" label="${tool.name} on ${on_string}: logfile">
        </data>
        <collection name="ROI" type="list" label="${tool.name} on ${on_string}: ROI">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.txt" directory="output" format="tabular"/>
        </collection>
        <data name="summary_results" format="csv" label="${tool.name} on ${on_string}: all results">
        </data>
    </outputs>
    <tests>
    <test expect_num_outputs="3">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <conditional name="input_format">
            <param name="file_type" value="tiff"/>
            <param name="input" value="test.tiff,test_original.tif"/>
        </conditional>
        <output name="logfile">
            <assert_contents>
                <has_text text="Label"/>
                <has_text text="Solidity"/>
                <has_text text="nRes:0"/>
                <has_text text="nRes:1"/>
            </assert_contents>
        </output>
        <output_collection name="ROI" type="list">
            <element name="test_tiff.tiff__0_roi_coordinates">
                <assert_contents>
                    <has_n_columns n="2"/>
                    <has_size value="23670" delta="10"/>
                </assert_contents>
            </element>
            <element name="test_original_tif.tiff__0_roi_coordinates">
                <assert_contents>
                    <has_n_columns n="2"/>
                    <has_size value="36570" delta="10"/>
                </assert_contents>
            </element>
        </output_collection>
        <output name="summary_results">
            <assert_contents>
                <has_line line=",Label,Area,Perim.,Circ.,Feret,FeretX,FeretY,FeretAngle,MinFeret,AR,Round,Solidity,Date,Version"/>
                <has_size value="346" delta="10"/>
            </assert_contents>
        </output>
    </test>
    </tests>
    <help>
    <![CDATA[
**Overview**

This tool will make 16bits image and use threshold and analyseParticle to measure Gastruloids.

**Script**

This is a ImageJ macro::

    // This macro was written thanks to
    // https://code.adonline.id.au/imagej-batch-process-headless/
    // and
    // https://visikol.com/2019/02/building-an-imagej-macro-for-batch-processing-of-images-from-imaging-well-plates/
    // The analysis part of the macro is from Pierre Osteil

    // Specify global variables

    tool_version = "20220118";

    parameter_string = getArgument();
    print(parameter_string);
    arglist = split(parameter_string, ",");

    inputDirectory = arglist[0];
    outputDirectory = arglist[1];
    suffix = arglist[2];
    // maxThreshold = arglist[3];

    setBatchMode(true); 

    close("\\Others");
    close("Summary");

    print("Will process the folder")

    processFolder(inputDirectory);

    print("Finished processed the folder");

    setBatchMode(false); // Now disable BatchMode since we are finished

    // Scan folders/subfolders/files to locate files with the correct suffix

    function processFolder(input) {
        list = getFileList(input);
        print(list.length);
        for (i = 0; i < list.length; i++) {
            print(list[i]);
            if(File.isDirectory(input + "/" + list[i])){
                print('Folder');
                processFolder("" + input + "/" + list[i]);          
            }
            if(endsWith(list[i], suffix)){
                print('Process');
                processImage("" + input + "/" + list[i]);          
            }
        }
    }

    function processImage(imageFile)
    {
        print(imageFile);
        run("Clear Results");
        print("nRes:" + nResults);
        open(imageFile);
        // Get the filename from the title of the image that's open for adding to the results table
        // We do this instead of using the imageFile parameter so that the
        // directory path is not included on the table
        filename = getTitle();
        
        print(filename);
        
        // Perform the analysis
        rename("original-image");
      	run("Duplicate...", "title=Image");
      	run("8-bit");
      	run("Sharpen");
      	run("Median...", "radius=1");
      	run("Duplicate...", "title=temp");
      	run("Maximum...", "radius=5");
      	run("Morphological Reconstruction", "marker=temp mask=Image type=[By Erosion] connectivity=4");
      	// Close previously used images:
      	selectWindow("Image");
      	close();
      	selectWindow("temp");
      	close();
      	selectWindow("temp-rec");
      	// Go on with analysis
      	run("Duplicate...", "title=temp2");
      	run("Minimum...", "radius=5");
      	run("Morphological Reconstruction", "marker=temp2 mask=temp-rec type=[By Dilation] connectivity=4");
      	// Close previously used images:
      	selectWindow("temp-rec");
      	close();
      	selectWindow("temp2");
      	close();
      	selectWindow("temp2-rec");
      	run("Invert LUT");
      	setAutoThreshold("Default dark");
      	run("Convert to Mask");
      	run("Fill Holes");
    
        //Get the measurements
        run("Set Measurements...", "area feret's perimeter shape display redirect=None decimal=3");
        run("Set Scale...", "distance=1 known=0.92 unit=micron"); //objective 4x 2.27 on TC microscope for x10 use 0.92 (measured by PierreO)
        // run("Analyze Particles...", "size=10000-400000 circularity=0.05-1.00 display clear exclude add"); // add clear to have one Result file per image
        run("Analyze Particles...", "size=10000-400000 circularity=0.05-1.00 display clear exclude show=Overlay"); // add clear to have one Result file per image
        print("nRes:" + nResults);
        
        if (nResults == 0) {
            print("Running low contrast analysis");
            // Another analysis is performed:
            // First close all unused windows:
      	    selectWindow("temp2-rec");
      	    close();
      	    selectWindow("original-image");
            
            run("8-bit"); 
            run("Enhance Contrast", "saturated=0.35");
            run("Sharpen"); 
            run("Median...", "radius=1");
            run("Maximum...", "radius=5");
            setAutoThreshold("Li dark");
            run("Convert to Mask");
            run("Dilate");
            run("Dilate");
            run("Dilate");
            run("Fill Holes");
            run("Erode");
            run("Erode");
            run("Erode");
            
            //Get the measurements
            run("Set Measurements...", "area feret's perimeter shape display redirect=None decimal=3");
            run("Set Scale...", "distance=1 known=0.92 unit=micron"); //objective 4x 2.27 on TC microscope for x10 use 0.92 (measured by PierreO)
            // run("Analyze Particles...", "size=10000-400000 circularity=0.05-1.00 display clear exclude add"); // add clear to have one Result file per image
            run("Analyze Particles...", "size=10000-400000 circularity=0.05-1.00 display clear exclude show=Overlay"); // add clear to have one Result file per image
            print("nRes:" + nResults);
        } else {
            // Close the original-image
      	    selectWindow("original-image");
      	    close();
      	    selectWindow("temp2-rec");
        }
        // Get date:
        getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
        TimeString = ""+year+"-";
        if (month<10) {TimeString = TimeString+"0";}
        TimeString = TimeString+month+"-";
        if (dayOfMonth<10) {TimeString = TimeString+"0";}
        TimeString = TimeString+dayOfMonth+"_";
        if (hour<10) {TimeString = TimeString+"0";}
        TimeString = TimeString+hour+"-";
        if (minute<10) {TimeString = TimeString+"0";}
        TimeString = TimeString+minute;
        // Now loop through each of the new results, and add the time to the "Date" column
        for (row = 0; row < nResults; row++)
        {
            setResult("Date", row, TimeString);
            setResult("Version", row, tool_version);
            // setResult("MaxThreshold", row, maxThreshold);
        }

        // Save the results data
        saveAs("results", outputDirectory + "/" + filename + "__Results.csv");
        // Now loop through Overlay:
        print("Overlay size:" + Overlay.size);
        for (i=0; i<Overlay.size; i++) {
            Overlay.activateSelection(i);
            getSelectionCoordinates(x,y);
            print("Opening file");
            f = File.open(outputDirectory + "/" + filename + "__" + i + "_roi_coordinates.txt");
            for (j=0; j<x.length; j++){
                print(f, x[j] + "\t" + y[j]);        
            print(f, x[j] + "\t" + y[j]);        
                print(f, x[j] + "\t" + y[j]);        
                print(f, x[j] + "\t" + y[j]);        
                print(f, x[j] + "\t" + y[j]);        
            }
            File.close(f);
        }
        print("Selection OK");
        close();  // Closes the current image
        print("OK");
    }

]]>
    </help>
</tool>

